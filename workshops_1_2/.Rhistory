library(Rsubread) ## alignment and feature counts
align(index="example_data/genome/ucsc.hg19.chr1_120-150M",readfile1="example_data/reads/R01_10_short500K.fq.gz",output_file="example_data/alignments/R01_10_short.bam", nthreads=4)
buildindex(basename=".../lecture_1/example_data/genome/ucsc.hg19.chr1_120-150M",
reference="../lecture_1/example_data/genome/ucsc.hg19.chr1_120-150M.fasta.gz")
buildindex(basename=".../lecture_1/example_data/genome/ucsc.hg19.chr1_120-150M",
reference="../lecture_1/example_data/genome/ucsc.hg19.chr1_120-150M.fasta.gz")
TBnanostring <- readRDS("example_data/TBnanostring.rds")
View(TBnanostring)
library(dslabs); data("movielens")
top <- movielens %>% group_by(movieId) %>%
summarize(n=n(), title = first(title)) %>%
top_n(50, n) %>% pull(movieId)
library(tidyverse)
library(dslabs); data("movielens")
top <- movielens %>% group_by(movieId) %>%
summarize(n=n(), title = first(title)) %>%
top_n(50, n) %>% pull(movieId)
x <- movielens %>%filter(movieId %in% top) %>%
group_by(userId) %>% filter(n() >= 25) %>%
ungroup() %>% select(title, userId, rating) %>%
spread(userId, rating)
x
?dist
install.package("")
install.package("SummarizedExperimetn")
install.package("SummarizedExperiment")
install.packages("SummarizedExperiment")
BiocManager::install("SummarizedExperiment")
se_hivtb <- SummarizedExperiment(assays=list(counts=counts),
colData = meta_data)
library(SummarizedExperiment)
se_hivtb <- SummarizedExperiment(assays=list(counts=counts),
colData = meta_data)
getwd()
setwd("../workshops_1_2/")
se_hivtb <- SummarizedExperiment(assays=list(counts=counts),
colData = meta_data)
counts <- read.table("features_combined.txt",
sep="\t", header=T, row.names=1)
meta_data <- read.table("meta_data.txt",
sep="\t", header=T, row.names=1)
se_hivtb <- SummarizedExperiment(assays=list(counts=counts),
colData = meta_data)
## Make log counts, counts per million (cpm), logcpm
se_hivtb <- mkAssay(se_hivtb, log = TRUE,
counts_to_CPM = TRUE)
library(TBSignatureProfiler)
se_hivtb <- SummarizedExperiment(assays=list(counts=counts),
colData = meta_data)
## Make log counts, counts per million (cpm), logcpm
se_hivtb <- mkAssay(se_hivtb, log = TRUE,
counts_to_CPM = TRUE)
assays(se_hivtb)
set.seed(1)
umap_out <- umap(t(assay(se_hivtb,"log_counts_cpm")))
library(umap)
set.seed(1)
umap_out <- umap(t(assay(se_hivtb,"log_counts_cpm")))
umap_plot <- as.data.frame(umap_out$layout)
umap_plot$Disease <- as.factor(se_hivtb$Disease)
g <- umap_plot %>% ggplot(aes(x=V1, y=V2, color=Disease)) +
geom_point(size=1.5) + xlab("UMAP1") + ylab("UMAP2") +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("UMAP Plot")
plot(g)
set.seed(0)
umap_out <- umap(t(assay(se_hivtb,"log_counts_cpm")))
umap_plot <- as.data.frame(umap_out$layout)
umap_plot$Disease <- as.factor(se_hivtb$Disease)
g <- umap_plot %>% ggplot(aes(x=V1, y=V2, color=Disease)) +
geom_point(size=1.5) + xlab("UMAP1") + ylab("UMAP2") +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("UMAP Plot")
plot(g)
TBnanostring <- readRDS("TBnanostring.rds")
TBnanostring <- readRDS("TBnanostring.rds")
## Apply UMAP reduction
set.seed(0)
library(umap)
umap_out <- umap(TBnanostring[,-1])
## Make dataframe for plotting in tidy format
umap_reduction <- as.data.frame(umap_out$layout)
umap_reduction$Condition <- as.factor(TBnanostring$TB_Status)
## Plot results with ggpplot
umap_reduction %>% ggplot() +
geom_point(aes(x=V1, y=V2, color=Condition), shape=1) +
xlab("UMAP 1") + ylab("UMAP 2") + ggtitle("UMAP Plot") +
theme(plot.title = element_text(hjust = 0.5))
sessionInfo()
devtools::install_github("wevanjohnson/singleCellTK")
devtools::install_github("wevanjohnson/singleCellTK", force=T)
library(singleCellTK)
singleCellTK()
